# -*- coding: utf-8 -*-
"""Dev_sample-code_Quest1_Group1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uoDRMm6ZOt-BPA6rCZ4QdiEI-P0AmSxs
"""

# define rooms and items
# Javier: 4 types of objects (values): "furniture", "door", "key", "room"
# Javier Creating the 'objects' couch, door_a, piano as dictionaries with 2 'keys' (key= name, value= type of object), and key_a as dictionnary with 3 keys
# Javier: note, a key has a door assigned to it (eg. key_a for door_a)
# Javier: we can add more keys (at least one per additional room), we can add other furniture (eg. trunk)... and more doors if we want to complicate things

couch = {
    "name": "couch",
    "type": "furniture",
}

door_a = {
    "name": "door a",
    "type": "door",
}

key_a = {
    "name": "key for door a",
    "type": "key",
    "target": door_a,
}

piano = {
    "name": "piano",
    "type": "furniture",
}

# Jav2: added the 4 furniture
bed = {
    "name": "bed",
    "type": "furniture",
}


lamp = {
    "name": "lamp",
    "type": "furniture",
}
chair = {
    "name": "chair",
    "type": "furniture",
}


table = {
    "name": "table",
    "type": "furniture",
}

# Javier: I created 2 additional furniture (for the fun of it), two additional doors and two additional keys
tele = {
    "name": "tele",
    "type": "furniture",
}

painting = {
    "name": "painting",
    "type": "furniture",
}

door_b = {
    "name": "door b",
    "type": "door",
}

key_b = {
    "name": "key for door b",
    "type": "key",
    "target": door_b,
}

door_c = {
    "name": "door c",
    "type": "door",
}

key_c = {
    "name": "key for door c",
    "type": "key",
    "target": door_c,
}

door_d = {
    "name": "door d",
    "type": "door",
}

key_d = {
    "name": "key for door d",
    "type": "key",
    "target": door_d,
}

door_e = {
    "name": "door e",
    "type": "door",
}

key_e = {
    "name": "key for door e",
    "type": "key",
    "target": door_e,
    "question": "What is the capital of France?",
    "answer": "Paris",
}
door_f = {
    "name": "door f",
    "type": "door",
}

key_f = {
    "name": "key for door f",
    "type": "key",
    "target": door_f,
}


mariona = {
    "name": "mariona",
    "type": "people",
}

dog = {
    "name": "dog",
    "type": "animal",
}

# Javier: Defining the rooms (here game_room and outside) as dictionaries 2 keys (name and type), one list of all the rooms (all_rooms).
# Javier: we shall create as many as we want (rooms)
game_room = {
    "name": "game room",
    "type": "room",
}

outside = {
  "name": "outside",
}

# Javier: I created two additional rooms
room_jav = {
  "name": "jav room",
  "type": "room",
}

room_nuria = {
  "name": "nuria room",
  "type": "room",
}

room_adriana = {
  "name": "adriana room",
  "type": "room",
}

room_mariona = {
  "name": "mariona room",
  "type": "room",
}

all_rooms = [game_room, outside, room_jav, room_nuria, room_adriana, room_mariona] # to add more rooms if we create more

all_doors = [door_a, door_b, door_c, door_d, door_e, door_f] # to add more doors if we create more rooms

# define which items/rooms are related
# Javier: to add the relationships of the added rooms
# Javier: I have added my room, and nuria's and changed the game to two additional rooms

object_relations = {
    "game room": [couch, piano, door_a, door_f],
    "jav room": [couch, piano, tele, door_a, door_b],
    "nuria room": [couch, tele, painting, door_b, door_c, dog],
    "adriana room": [bed, lamp, door_c, door_d, dog],
    "mariona room": [chair, table, mariona, door_d, door_e, door_f],
    "piano": [key_f, key_a],
    "tele": [key_b],
    "painting": [key_c],
    "lamp": [key_d],
    "mariona": [key_e],
    "outside": [door_e],
    "door a": [game_room, room_jav],
    "door b": [room_jav, room_nuria],
    "door c": [room_nuria, room_adriana],
    "door d": [room_adriana, room_mariona],
    "door e": [room_mariona, outside],
    "door f": [game_room, room_mariona],

}


#Old code
#object_relations = {
#    "game room": [couch, piano, door_a],
#    "piano": [key_a],
#    "outside": [door_a],
#    "door a": [game_room, outside]
#}

# define game state. Do not directly change this dict.
# Instead, when a new game starts, make a copy of this
# dict and use the copy to store gameplay state. This
# way you can replay the game multiple times.

INIT_GAME_STATE = {
    "current_room": game_room,
    "keys_collected": [],
    "target_room": outside
}

def linebreak():
    """
    Print a line break
    """
    print("\n\n")

def start_game():
    """
    Start the game
    """
    print("You wake up on a couch and find yourself in a strange house with no windows which you have never been to before. You don't remember why you are here and what had happened before. You feel some unknown danger is approaching and you must get out of the house, NOW!")
    print("A hollow voice in you head whispers: 'explore' to know what items you see in a room, 'examine' to get closer to an item and 'question' a person.")
    play_room(game_state["current_room"])

def play_room(room):
    """
    Play a room. First check if the room being played is the target room.
    If it is, the game will end with success. Otherwise, let player either
    explore (list all items in this room) or examine an item found here.
    """
    game_state["current_room"] = room
    if(game_state["current_room"] == game_state["target_room"]):
        print("Congrats! You escaped the house! Woof, woof!")
    else:
        print("------------------------------------------------------------------------")
        print("                 You are now in " + room["name"])
        intended_action = input("What would you like to do? Type 'explore' , 'examine' or , 'question' ? ").strip()
        if intended_action == "explore":
            explore_room(room)
            play_room(room)
        elif intended_action == "examine":
            ok = False
            while not ok:
              val = input('What would you like to examine?  ')
              if val == "mariona":
                print('  GET AWAY FROM ME YOU CREEP!')
              else:
                ok = True
                examine_item(val)

        elif intended_action == "question":
            examine_item(input("Who would you like to question?  ").strip().lower())
        else:
            print("Not sure what you mean. Type 'explore' or 'examine' or 'question'. ")
            play_room(room)
        linebreak()

def explore_room(room):
    """
    Explore a room. List all items belonging to this room.
    """
    items = [i["name"] for i in object_relations[room["name"]]]
    print("You are exploring the room. This is " + room["name"] + ". You found the " + ", ".join(items))

def get_next_room_of_door(door, current_room):
    """
    From object_relations, find the two rooms connected to the given door.
    Return the room that is not the current_room.
    """
    connected_rooms = object_relations[door["name"]]
    for room in connected_rooms:
        if(not current_room == room):
            return room

def examine_item(item_name):
    """
    Examine an item which can be a door or furniture.
    First make sure the intended item belongs to the current room.
    Then check if the item is a door. Tell player if key hasn't been
    collected yet. Otherwise ask player if they want to go to the next
    room. If the item is not a door, then check if it contains keys.
    Collect the key if found and update the game state. At the end,
    play either the current or the next room depending on the game state
    to keep playing.
    """
    current_room = game_state["current_room"]
    next_room = ""
    output = None

    for item in object_relations[current_room["name"]]:
        if(item["name"] == item_name):
          output = "You get close to " + item_name + ". "
          if(item["type"] == "door"):
            have_key = False
            for key in game_state["keys_collected"]:
                if(key["target"] == item):
                    have_key = True
            if(have_key):
                output += "You unlock it with a key you have."
                print("------------------------------------------------------------------------")
                next_room = get_next_room_of_door(item, current_room)
            else:
                output += "It is locked but you don't have the key."

          elif (item["type"] == "people"):
            output = "You ask a question to " + item_name + ". "
            print("What are you doing in my room! If you want me to let you out, you have to answer my question.")
            nok_tag= True
            while nok_tag:
              answer = (input('What is the capital of France?  ')).strip().lower()
              if answer == 'paris':
                nok_tag = False
              else:
                print('You can do better, try again')
            item_found = object_relations[item["name"]].pop() # Javier: Means we found the key and it is not anymore in the objet_relation dict
            game_state["keys_collected"].append(item_found) # Javier: we add the key to our list of keys found
            output += "You find " + item_found["name"] + "."

          elif (item["type"] == "animal"):
             output = "You ask a question to " + item_name + ". "
             output += "Woof! Woof! "

          else:
              #cuando hay llave y el diccionario contiene 5 elementos, hay pregunta dict.items()
                  # answer = input(question)
                  #ask the question:
                  #user inputs their answer to the question
                  #check if the answer corresponds to the value
                  #try again if the answer is wrong
                  #find the key if the answer is right
              # adri: code idea para cuando la llave tiene 3 > elementos
               #adri: if(item["name"] in object_relations and len(object_relations[item["name"]])> 3):
                    #adri: item_found = object_relations[item["name"]].pop() # Javier: Means we found the key and it is not anymore in the objet_relation dict
                    #adri: game_state["keys_collected"].append(item_found) # Javier: we add the key to our list of keys found
                   # adri output += "You find " + item_found["name"] + "."
              #cuando hay llave y el diccionario contiene 3 elementos, no hay pregunta dict.items()
              if(item["name"] in object_relations and len(object_relations[item["name"]])>0):
                  item_found = object_relations[item["name"]].pop() # Javier: Means we found the key and it is not anymore in the objet_relation dict
                  game_state["keys_collected"].append(item_found) # Javier: we add the key to our list of keys found
                  output += "You find " + item_found["name"] + "."
              #cuando no hay llave
              else:
                  output += "There isn't anything interesting about it."
          print(output)
          break

    if(output is None):
        print("The item you requested is not found in the current room.") # Javier: for handling a typo

    if(next_room and input("Do you want to go to the next room? Enter 'yes' or 'no'").strip() == 'yes'):
        play_room(next_room)
    else:
        play_room(current_room)



game_state = INIT_GAME_STATE.copy()

start_game()

